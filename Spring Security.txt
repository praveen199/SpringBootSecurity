4. Create Microservices
======================================================================================================================================================================================
4.2 Create the database tables
--------------------------------------
create table coupon(
ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
code varchar(20) UNIQUE,
discount decimal(8,3),
exp_date varchar(100) 
);

4.4 Create model and repository
----------------------------------------

@Entity
public class Coupon {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;
	private String code;
	private String discount;
	private String exp_date;
	
}

public interface CouponRepo extends JpaRepository<Coupon, Integer> {
	Coupon findByCode(String code);
}

4.5 Create the Rest Controller
---------------------------------------------
@RestController
@RequestMapping(value="/coupon-api")
public class CouponController {

	@Autowired
	private CouponRepo couponRepo;
	
	@RequestMapping(value="/create-coupon",method = RequestMethod.POST)
	public Coupon createCoupon(@RequestBody Coupon coupon) {
		return couponRepo.save(coupon);
	}
	
	@RequestMapping(value="/get-coupon/{code}",method = RequestMethod.GET)
	public Coupon getCoupon(@PathVariable String code) {
		return couponRepo.findByCode(code) ;
	}
}

4.7 Test
-----------------------------------------------
POST : localhost:8080/coupon-api/create-coupon
{
    "code" : "SUPERSALE",
    "discount" : "10",
    "exp_date" : "12/12/2020"
}


GET : localhost:8080/coupon-api/get-coupon/SUPERSALE

4.8 Create the Project Model and Repository 
------------------------------------------------

create table product(
ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
name VARCHAR(20),
description VARCHAR(20),
price decimal(8,3) 
);

@Entity
public class Product {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;
	private String name;
	private String description;
	private BigDecimal price;
}

public interface ProductRepo extends JpaRepository<Product, Integer> {

}

4.9. Create the RestController
------------------------------------------------
@RestController
@RequestMapping(value="/product-api")
public class ProductController {

	@Autowired
	private ProductRepo repo;
	 
	@RequestMapping(value="/create-product", method=RequestMethod.POST)
	public Product  create(@RequestBody  Product product) {
		return repo.save(product);
	}
	
}

4.10 Configure DataSource
------------------------------------------------
spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=10July@1990
spring.datasource.driver-class-name=org.postgresql.Driver
server.port=8081

4.11 Test
------------------------------------------------
POST - localhost:8081/product-api/create-product

{
    "name" : "IPhone",
    "description"  : "Awesome",
    "price" : 1000
}


4.12 Integrate Microservices
------------------------------------------------
@Entity
public class Product {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;
	private String name;
	private String description;
	private BigDecimal price;
	@Transient
	private String couponCode; //new 
	
}

//DTO with no annotations

public class Coupon {
	private int id;
	private String code;
	private BigDecimal discount;
	private String expDate;	
}


@RestController
@RequestMapping(value="/product-api")
public class ProductController {

	@Autowired
	private ProductRepo repo;
	 
	@Autowired
	private RestTemplate restTemplate;
	
	@Value("${couponService.url}")
	private String couponServiceURL;
	
	@RequestMapping(value="/create-product", method=RequestMethod.POST)
	public Product  create(@RequestBody  Product product) {
		Coupon coupon = restTemplate.getForObject(couponServiceURL + product.getCouponCode() , Coupon.class);
		product.setPrice(product.getPrice().subtract(coupon.getDiscount()));
		return repo.save(product);
	}
}

@SpringBootApplication
public class ProductService1Application {

	@Bean
	public RestTemplate restTemplate () {
		return new RestTemplate();
	}
	public static void main(String[] args) {
		SpringApplication.run(ProductService1Application.class, args);
	}

}

application.properties
---------------------------
couponService.url=http://localhost:8080/coupon-api/get-coupon/

4.13 Integration Testing
------------------------------------------------
POST : localhost:8081/product-api/create-product

{
    "name" : "IPhone",
    "description"  : "Awesome",
    "price" : 1000,
    "couponCode" : "SUPERSALE"
}

Response :

{
    "id": 2,
    "name": "IPhone",
    "description": "Awesome",
    "price": 990.00,
    "couponCode": "SUPERSALE"
}

======================================================================================================================================================================================
5.2 Create Tables
------------------------------
CREATE TABLE USER_TABLE(
ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
FIRST_NAME VARCHAR(20),
LAST_NAME VARCHAR(20),
EMAIL VARCHAR(20) UNIQUE,
PASSWORD VARCHAR(256)
);

CREATE TABLE ROLE_TABLE
(
ID INT GENERATED AS DEFAULT AS IDENTITY PRIMARY KEY,
NAME VARCHAR(20)
);

CREATE TABLE USER_ROLE 
(
USER_ID INT,
ROLE_ID INT,
FOREIGN KEY(USER_ID) REFERENCES  USER_TABLE(id),
FOREIGN KEY(ROLE_ID) REFERENCES  ROLE_TABLE(id)
);

insert into USER_TABLE(first_name,last_name,email,password) values ('doug','bailey','doug@bailey.com','$2a$10$U2STWqktwFbvPPsfblVeIuy11vQ1S/0LYLeXQf1ZL0cMXc9HuTEA2');
insert into USER_TABLE(first_name,last_name,email,password) values ('john','ferguson','john@ferguson.com','$2a$10$YzcbPL.fnzbWndjEcRkDmO1E4vOvyVYP5kLsJvtZnR1f8nlXjvq/G');

insert into ROLE_TABLE values(1,'ROLE_ADMIN');
insert into ROLE_TABLE values(2,'ROLE_USER');

insert into user_role values(1,1);
insert into user_role values(2,2);

select * from USER_TABLE;
select * from ROLE_TABLE;
select * from user_role;

ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY

======================================================================================================================================================================================
5.3
----------------
# changes inside coupon-service
# Role class will implement GrantedAuthority interface

@Entity
@Table(name="user_table")
public class User {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	private String first_name;
	private String last_name;
	private String email;
	private String password;
}

@Entity
@Table(name="role_table")
public class Role implements GrantedAuthority {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	@Column(name="name")
	private String role_name;
}
	
======================================================================================================================================================================================
5.4 Define Entity Relationships
-----------------------------------------

@Entity
@Table(name="user_table")
public class User {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	private String first_name;
	private String last_name;
	private String email;
	private String password;
	
	@ManyToMany(fetch = FetchType.EAGER)
	@JoinTable(name = "USER_ROLE",joinColumns = @JoinColumn(name = "USER_ID"),inverseJoinColumns = @JoinColumn(name="ROLE_ID"))
	private Set<Role> roles;
}

@Entity
@Table(name="role_table")
public class Role implements GrantedAuthority {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	@Column(name="name")
	private String role_name;
	
	@ManyToMany(mappedBy = "roles")
	private Set<User> users;
}

======================================================================================================================================================================================
5.5 Create Repos
-----------------------------------------

public interface UserRepo extends JpaRepository<User, Long> {
	User findByEmail(String email);
}

public interface RoleRepo extends JpaRepository<Role, Long> {

}

======================================================================================================================================================================================
5.6 Implement UserDetailsService
-----------------------------------------
@Service
public class UserDetailsServiceImpl implements UserDetailsService{

	@Autowired
	private UserRepo repo;
	
	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		User user = repo.findByEmail(username);
		if(user == null) {
			throw new UsernameNotFoundException("User not found in database " + username);
		}
		return new org.springframework.security.core.userdetails.User(user.getEmail(), user.getPassword(),user.getRoles());
	}
}

======================================================================================================================================================================================
5.7 Create WebSecurityConfig
-----------------------------------------

@SuppressWarnings("deprecation")
@Configuration
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

	@Autowired
	UserDetailsServiceImpl userDetailsService ;
	
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		auth.userDetailsService(userDetailsService);
    }
    
    @Bean
    public PasswordEncoder passwordEncoder() {
    	 return new BCryptPasswordEncoder();
    }
}

======================================================================================================================================================================================
5.8 Secure the URLs and Methods
-----------------------------------------
# CSRF need to disable to test POST calls.

@SuppressWarnings("deprecation")
@Configuration 
public class WebSecurityConfig extends WebSecurityConfigurerAdapter{

	@Autowired
	UserDetailsServiceImpl userDetailsServiceImpl;

	public void configure(AuthenticationManagerBuilder auth) throws Exception {
		auth.userDetailsService(userDetailsServiceImpl);
	}

	public void configure(HttpSecurity http) throws Exception {
		http.httpBasic();
		http.authorizeRequests().mvcMatchers(HttpMethod.GET,"/coupon-api/get-coupon/**","/","/index").hasAnyRole("USER","ADMIN")
								.mvcMatchers(HttpMethod.POST,"/coupon-api/create-coupon").hasRole("ADMIN").and().csrf().disable();

	}

	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
}

======================================================================================================================================================================================
5.9 Test Security
----------------------
GET : localhost:8080/coupon-api/create-coupon/SUPERSALE

postman -> Authorization -> select type as basic auth -> username - doug@bailey.com
														 password - doug														 
Response :
{
    "id": 1,
    "code": "SUPERSALE",
    "discount": 10.00,
    "exp_date": "12/12/2020"
}
-------------------------------------------------------------------------------------------------
now try 
username - john@ferguson.com
password - john

Response :
{
    "id": 1,
    "code": "SUPERSALE",
    "discount": 10.00,
    "exp_date": "12/12/2020"
}
-------------------------------------------------------------------------------------------------
now try 
username - doug123@bailey.com
password - doug

401 Unauthorized
-------------------------------------------------------------------------------------------------
POST : localhost:8080/coupon-api/create-coupon

postman -> Authorization -> select type as basic auth -> username - doug@bailey.com
														 password - doug
														 
Body :
{
    "code" : "SUPERSALE",
    "discount" : "10",
    "exp_date" : "12/12/2020"
}

Response :
{
    "id": 3,
    "code": "SUPERSALE",
    "discount": 10,
    "exp_date": "12/12/2020"
}
-------------------------------------------------------------------------------------------------
POST : localhost:8080/coupon-api/create-coupon

postman -> Authorization -> select type as basic auth -> username - john@ferguson.com
														 password - john
														 
Response :
{
    "timestamp": "2022-07-19T02:28:55.791+00:00",
    "status": 403,
    "error": "Forbidden",
    "path": "/coupon-api/create-coupon"
}
======================================================================================================================================================================================
6. Secure a WebApp
----------------------

